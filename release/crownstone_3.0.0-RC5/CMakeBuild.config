# Configuration options, used by build systems and scripts.

# The name that is advertised.
# Should be 4 characters or less
BLUETOOTH_NAME="CS"

FIRMWARE_VERSION="3.0.0-RC5"
BOOTLOADER_VERSION="undefined"

# The different boards that can be used:
# ## old crownstones
# CROWNSTONE5          0
# PLUGIN_FLEXPRINT_01  1
# ## nordic boards
# PCA10036             40
# PCA10040             41
# ## square guidestone
# GUIDESTONE           100
# ## crownstone builtin
# ACR01B1A             1000
# ACR01B1B             1001
# ACR01B1C             1002
# ACR01B1D             1003
# ACR01B1E             1004
# ACR01B6C             1005
# ## crownstone plug
# ACR01B2A             1500
# ACR01B2B             1501
# ACR01B2C             1502
# ACR01B2E             1503
# ACR01B2G             1504
# HARDWARE_BOARD=ACR01B2C

# The default hardware board, in case no board is written in UICR.
# This value will also be written to UICR.
DEFAULT_HARDWARE_BOARD=ACR01B2C

# Add reset counter at end of name
CHANGE_NAME_ON_RESET=0

# Enable or disable meshing (1 or 0)
MESHING=1
BUILD_MESHING=1

# Advertise iBeacon packets.
IBEACON=1

# Set if crownstone should set power on by default when turning on
# TODO: remove this
DEFAULT_ON=0

# Enable or disable interval scanner, will scann every
# SCAN_DURATION + SCAN_BREAK_DURATION ms, for SCAN_DURATION ms
INTERVAL_SCANNER_ENABLED=0

# Enables the dimmer.
PWM_ENABLE=1

# Define the iBeacon advertisement package parameters
# only applies if IBEACON==1
# the proximity UUID.
BEACON_UUID="a643423e-e175-4af0-a2e4-31e32f729a8a"
# the major number
BEACON_MAJOR=0
# the minor number
BEACON_MINOR=0
# the rssi
BEACON_RSSI=0xC4

# Set to 1 to enable encryption of BLE (characteristics and advertisements)
ENCRYPTION=1

# Maximum number of vendor specific services
# NOTE: increasing this will also need to increase the RAM_R1_BASE
MAX_NUM_VS_SERVICES=2

# Enable or disable characteristics
CHAR_CONTROL=1
CHAR_CONFIGURATION=1
CHAR_STATE=1

# Size of the master buffer
# Currently this should not be larger than BLE_GATTS_VAR_ATTR_LEN_MAX (512)
MASTER_BUFFER_SIZE=300

# Verbosity of the UART
# SERIAL_DEBUG     0
# SERIAL_INFO      1
# SERIAL_WARNING   2
# SERIAL_ERROR     3
# SERIAL_FATAL     4
# SERIAL_NONE      5
SERIAL_VERBOSITY=SERIAL_BYTE_PROTOCOL_ONLY

# Uart mode
# SERIAL_ENABLE_NONE         0
# SERIAL_ENABLE_RX_ONLY      1
# SERIAL_ENABLE_RX_AND_TX    3
CS_SERIAL_ENABLED=0

CS_UART_BINARY_PROTOCOL_ENABLED=1

# Use the NRF logger module, handy when debugging NRF modules.
# 0 to disable.
# 1 to use RTT for logging, so it can coexist with bluenet serial.
#   Only works when connected via JLink.
# 2 to use UART, this replaces bluenet serial, and thus breaks the binary protocol.
#   Also, the UART pin is then defined at compile time.
CS_SERIAL_NRF_LOG_ENABLED=0
CS_SERIAL_NRF_LOG_PIN_TX=6

NRF_SERIES=NRF52

# Default transmission power
# Can be: -40, -20, -16, -12, -8, -4, 0, or 4
TX_POWER=4

# Default advertisement interval, in units of 0.625 ms
# Must be between 32 and 16384
ADVERTISEMENT_INTERVAL=160

# Maximal chip temperature in degrees celsius
MAX_CHIP_TEMP=75

# Time (ms) to wait with during booting
BOOT_DELAY=400

# Durations for the scanner in ms
SCAN_DURATION=2000
SCAN_BREAK_DURATION=7000

# Enable RSSI measurements when connected.
ENABLE_RSSI_FOR_CONNECTION=1

# Connection alive timeout.
# If no valid control command is received within timeout,
# the connection is closed by the device.
# Set to 0 to disable the timeout.
CONNECTION_ALIVE_TIMEOUT=20000

# This is the directory where the cross-compiler resides
#COMPILER_PATH=

# The compiler type
COMPILER_TYPE=arm-none-eabi-

# The JLink utility (when using the Segger to flash the nRF)
JLINK=/usr/bin/JLinkExe

# The JLink utilty that can be used with gdb
JLINK_GDB_SERVER=/usr/bin/JLinkGDBServer

# The device can be nRF51822 or nRF52832_xxAA
DEVICE=nRF52832_xxAA

# Use SoftDevice (setting to 0 is untested)
# [18.07.16] do we really want this flag still? Most of our code depends on the
# softdevice being present. disabling this flag won't work without major code changes!!
NRF51_USE_SOFTDEVICE=1

# the directory with /Source and /Include subdirectories from the Nordic SDK
#NRF5_DIR=
# the nordic sdk version
NORDIC_SDK_VERSION=15

# starting with SoftDevice S110 v7 there is no separate UICR section
SOFTDEVICE_NO_SEPARATE_UICR_SECTION=1

# Bootloader without debug:
# We actually don't need 0x8000, but it's to reserve some space for future bootloaders.
BOOTLOADER_START_ADDRESS=0x00076000
BOOTLOADER_LENGTH=0x8000
# Bootloader with debug:
#BOOTLOADER_START_ADDRESS=0x00071000
#BOOTLOADER_LENGTH=0xD000


# Has to match values in: bootloader/secure_bootloader_gcc_nrf52.ld
# 0x00080000 - BOOTLOADER_START_ADDRESS - 1000 - 1000 = 6000
# nrf52: length = 0x00080000 - bootloader_start_address - size(bootloader_settings)=0x1000 - size(mbr_params_page)=0x1000


## UICR

# DFU is using the first 4 bytes in the UICR (0x10001080) for DFU INIT checks.
UICR_DFU_INDEX=0
# We use the second 4 bytes in the UICR (0x10001084) to store the hardware board type.
UICR_BOARD_INDEX=1

# The address (in UICR) where the hardware board type is written and read
HARDWARE_BOARD_ADDRESS=0x10001084

# The directory where the softdevice can be found
# change if you want to use a different softdevice than the ones provided in the SDK
# leave undefined for default
# SOFTDEVICE_DIR=
# The name of the directory where the include files resides of the Softdevice, relative to
# the SOFTDEVICE_DIR, leave undefined for default
# SOFTDEVICE_DIR_API=
# The name of the directory where the hex files resides of the Softdevice, relative to
# the SOFTDEVICE_DIR, leave undefined for default
# SOFTDEVICE_DIR_HEX=

# SOFTDEVICE                           - the name of the SoftDevice (without _softdevice.hex)
# SOFTDEVICE_SERIES                    - the series of the SoftDevice (s110 vs s130 e.g.), used in the code
#
# -- TODO: update the text below --
# For the following examples, suppose the SoftDevice takes 80kB and the application 176kB
# APPLICATION_START_ADDRESS            - 80kB corresponds with 0x00014000 hex
# Check https://devzone.nordicsemi.com/question/15994/nrf51822-iram-and-irom-settings-for-v05-s130-sd/
# APPLICATION_LENGTH                   - 176kB corresponds with 0x2c000 hex, should be 0x40000 - 0x14000
# RAM_R1_BASE                          - starting point for softdevice in RAM
# RAM_APPLICATION_AMOUNT               - size of softdevice in RAM

#######################################################################################################################
# S132 6.0 (comes with SDK 15)
#######################################################################################################################
SOFTDEVICE_MAJOR=6
SOFTDEVICE_MINOR=1
SOFTDEVICE_SERIES=132
SOFTDEVICE=s132_nrf52_6.1.1

# We get APPLICATION_START_ADDRESS from $NRF5_DIR/config/nrf52832/armgcc/generic_gcc_nrf52.ld
# We repeat them here, but you will have to adjust that file...
# TODO: Copy the relevant files to the local repository again...
APPLICATION_START_ADDRESS=0x00026000

# This should be a chip with 512kB, so 0x80000 - 0x26000 = 0x5A000
APPLICATION_LENGTH=0x5A000

## To enable all services the gatt attribute table size has to be increased, and in turn, the RAM_R1_BASE and
## RAM_APPLICATION_AMOUNT variables have to be adjusted. Default for the ATTR_TABLE_SIZE is 0x580, so if you
## increase the ATTR_TABLE_SIZE, the RAM_R1_BASE has to be increased by the same value and the RAM_APPLICATION_AMOUNT
## has to be decreased by the same value (and most likely the HEAP_SIZE as well), e.g.

# TODO: Calculate new attr table size, and adjust RAM_R1_BASE accordingly

# WARNING, WARNING
# The following values are not used...
# Adjust them in $BLUENET_DIR/include/third/nrf/generic_gcc_nrf52.ld for now! (adjusted version of $NRF5_DIR/config/nrf52832/armgcc/generic_gcc_nrf52.ld)

ATTR_TABLE_SIZE=0x500

RAM_R1_BASE=0x20002380
# This is 0x20010000 - RAM_R1_BASE
RAM_APPLICATION_AMOUNT=0xDC80

HEAP_SIZE=20000
